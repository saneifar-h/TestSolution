@using TestSolution.Client.Pages.Components.EmojiPicker
@using TestSolution.Shared
@using Markdig;
@page "/newchat"
@inject NavigationManager navigationManager


<style>
    .resizedImg {
        height: 200px;
        background-color: #ccc;
        border-style: solid;
        border-width: 1px;
        border-color: #ccc;
        /* border-radius */
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        /* box-shadow */
        -webkit-box-shadow: rgba(0,0,0,0.8) 0px 0 3px;
        -moz-box-shadow: rgba(0,0,0,0.8) 0 0 3px;
        box-shadow: rgba(0,0,0,0.8) 0 0 3px;
        cursor: pointer;

        transition: opacity 1s;
    }
    .resizedImg:hover {
        opacity: 0.5;
    }
</style>
<div class="top-row px-4">
    @if (viewmodel.Chatting)
    {
        <p>You are connected as <b>@viewmodel.Username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@viewmodel.DisconnectAsync">Disconnect</button>
    }
</div>

<div class="content px-4">

    <h1>Blazor SignalR Chat Sample with Emoji and File Upload Support</h1>

    @if (!@viewmodel.Chatting)
    {
        <h2>Chat</h2>

        <p>
            Enter your name to start chatting:
        </p>

        <input type="text" maxlength="32" @bind="@viewmodel.Username" />
        <button type="button" @onclick="Start"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

        @if (@viewmodel.Message != null)
        {
            <div class="invalid-feedback">@viewmodel.Message</div>
            <small id="emailHelp" class="form-text text-muted">@viewmodel.Message</small>
        }
    }

    @if (@viewmodel.Chatting)
    {
        <div id="scrollbox">

            @foreach (var item in @viewmodel.Messages)
            {
                <div class="@item.Css">
                    <div class="user">@item.Username</div>
                    <div class="msg">@((MarkupString)Markdown.ToHtml(@item.Body))</div>
                </div>
            }
            <hr />
            @*<textarea class="input-lg" placeholder="enter your comment" @bind="@viewmodel.NewMessage"></textarea>
                <button class="btn btn-success" @onclick="@viewmodel.SendAsync" style="margin-bottom: 30px">Send</button>*@

            <EditForm Model="viewmodel" Context="formContext" OnValidSubmit="viewmodel.Send">

                <EmojiInput IsSubmitDisabled="@(!viewmodel.IsConnected)" Placeholder="Message.." ShowSubmit="true" CustomSymbols="@viewmodel.CustomSymbols"
                            @bind-Message="@viewmodel.NewMessage" AddFiles="@viewmodel.AddFiles" FileUploadRoute="@(CommonRoutes.FileUploadUrl)" />
            </EditForm>
        </div>
    }
</div>

@code
{
    NewChatViewModel viewmodel = new NewChatViewModel();

    async Task Start()
    {
        await viewmodel.Chat(navigationManager.BaseUri);
        viewmodel.StateChanged += (s, e) => StateHasChanged();
    }
}
